let [yn,zn]=nmax(y,z);
//zn+=2*Math.cos(y/2)
let c0=[0,0,8]; // Centre of shape
let c=[x,yn,zn]; // Coordinate
let r=14;
let t = 3; // Wall thickness (r = filled)
let l = [12,12,12] //
//ethsphere(c,c0,r,t,2) // Create sphere
//randcol([3,0,5],[0.05,0.9])
//ethcube(c,c0,l,t,2) // Create sphere
//randcol() // Randomise colours
//ethcube(c,c0,l,t,0) // Create sphere
//ethplane(z+4*Math.cos(y/4)+4*Math.cos(x/2),10,3,6)
//ethtube([x,yn,zn],c0,14,3,4,10)

ethnut([x,zn,yn],[0,0,20],16,12,4,6)

// Shapes

function ethsphere(c,c0,r,t,p) {
  let d = ((c[0]-c0[0])**2 + (c[1]-c0[1])**2 + (c[2]-c0[2])**2)**0.5;
    if (d<=r&&d>(r-t)){buildArray[i]=p}
}

function ethcube(c,c0,l,t,p) {
  let d = [Math.abs(c[0]-c0[0]),Math.abs(c[1]-c0[1]),Math.abs(c[2]-c0[2])]
    if (d[0]<l[0]/2&&d[1]<l[1]/2&&d[2]<l[2]/2
       &&(d[0]>=(l[0]/2-t)||d[1]>=(l[1]/2-t)||d[2]>=(l[2]/2-t))
       ){buildArray[i]=p}
}

function ethplane(c,c0,t,p){// Plane
  if (c>=c0-t/2&&c<=c0+t/2){buildArray[i]=p}
}

function ethtube(c,c0,r,l,t,p){ // Cylinder/tube
    let d = ((c[0]-c0[0])**2 + (c[1]-c0[1])**2)**0.5;
    if (d<=r&&d>=(r-t)&&(Math.abs(c[2]-c0[2])<=(l/2))){buildArray[i]=p}
}

function ethnut(c,c0,R,r,t,p){ // Torus
  let d = (( ((c[0]-c0[0])**2+(c[1]-c0[1])**2)**0.5-R)**2 + (c[2]-c0[2])**2)**0.5;
  if (d<=r&&(d>=r-t/2)){buildArray[i]=p}
}

function ethpyramid(){}

function ethhex(){}

// Other functions
function nmax(y,z){
  let yn = y*(Math.sqrt(3))/2; 
    let zn = z/1.6; // Normalise y and z dimensions to units of x
  return [yn,zn]
}
function randcol(p,k){ // Recolour with colours p and probability k
  if (buildArray[i]>0){
    k[k.length]=1;
    let r = Math.random();
    for (let jk=0;jk<k.length;jk++){
        if(jk>0){k[jk]=k[jk]+k[jk-1]}
      if(r<=k[jk]){
          buildArray[i] = p[jk]
          break}
    }
  }
}
