let [X,Y,Z]=axnm(x,y,z); // Normalise distances
let [x1,y1,x2,y2]=axsix(X,y); // Rotated axes


let c0=[0,0,12]; // Centre of shape
let c=[X,Y,Z]; // Coordinate

ethsphere(c,c0,14,3,2) // Create sphere
ethtube(c,c0,[14,3],4,10) // Tube
ethnut(c,[0,0,32],[8,4],4,41) // Torus
ethnut([X,Z,Y],[0,0,32],[8,4],4,41) // Torus (reoriented)
ethnut([X,Z,Y],[0,0,-32],[8,4],4,41) // Torus (reoriented)
ethcube(c,[32,0,4],[12,12,8],3,12) // Cuboid
ethcube([X,Y,Z+2*Math.sin(Y)],[-32,0,4],[12,12,8],3,12) // Cuboid in distorted space

// Illustrate rotated axes
if((x2>-0.5&&x2<1||y2>-1&&y2<1)&&z<2){buildArray[i]=35}
if((x1>-0.5&&x1<1||y1>-1&&y1<1)&&z<2){buildArray[i]=33}
if((y>-1&&y<1||X>-0.5&&X<1)&&z<2){buildArray[i]=59}


// Create Shapes
////////////////////////////////////////////////////////////
// c - coordinates [x,y,z]: can be used to change orientation 
//     of shape and introduce transforms etc
// c0 - centre of shape
// l - dimensions of shape
// t - shape thickness
// p - colour (number in palette)

function ethsphere(c,c0,l,t,p) {
  // l - [radius]
  let d = ((c[0]-c0[0])**2 + (c[1]-c0[1])**2 + (c[2]-c0[2])**2)**0.5;
    if (d<=l&&d>(l-t)){buildArray[i]=p}
}

function ethcube(c,c0,l,t,p) {
  // l - [x,y,z] dimensions
  let d = [Math.abs(c[0]-c0[0]),Math.abs(c[1]-c0[1]),Math.abs(c[2]-c0[2])]
    if (d[0]<l[0]/2&&d[1]<l[1]/2&&d[2]<l[2]/2
       &&(d[0]>=(l[0]/2-t)||d[1]>=(l[1]/2-t)||d[2]>=(l[2]/2-t))
       ){buildArray[i]=p}
}

function ethplane(c,c0,t,p){// Plane
  if (c>=c0-t/2&&c<=c0+t/2){buildArray[i]=p}
}

function ethtube(c,c0,l,t,p){ // Cylinder/tube
  // l - [radius,length]
    let d = ((c[0]-c0[0])**2 + (c[1]-c0[1])**2)**0.5;
    if (d<=l[0]&&d>=(l[0]-t)&&(Math.abs(c[2]-c0[2])<=(l[1]/2))){buildArray[i]=p}
}

function ethnut(c,c0,l,t,p){ // Torus
  // l - [R,r]
  let d = (( ((c[0]-c0[0])**2+(c[1]-c0[1])**2)**0.5-l[0])**2 + (c[2]-c0[2])**2)**0.5;
  if (d<=l[1]&&(d>=l[1]-t/2)){buildArray[i]=p}
}

function ethpyramid(){}

function ethhex(){}


// Other functions
//////////////////////////////////////////////////////////////

function axnm(x,y,z){
    let xn = x + 0.5*(Math.abs(y)%2);
    let yn = y*(Math.sqrt(3))/2;; 
    let zn = z/1.6; // Normalise y and z dimensions to units of x
  return [xn,yn,zn]
}

function axsix(x,y){
  let x1=y+x/1.5; let y1=x-y/2;
  let x2=y-x/1.5; let y2=-x-y/2;
  return [x1,y1,x2,y2]
}

function randcol(p,k){ 
  // Recolour with colours p and probability k
  if (buildArray[i]>0){
    k[k.length]=1;
    let r = Math.random();
    for (let jk=0;jk<k.length;jk++){
        if(jk>0){k[jk]=k[jk]+k[jk-1]}
      if(r<=k[jk]){
          buildArray[i] = p[jk]
          break}
    }
  }
}